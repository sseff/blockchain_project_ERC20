{"ast":null,"code":"var _jsxFileName = \"/Users/sefikaakman/Desktop/483 project2/483_project_ERC20/src/Wallet.js\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Interactions from './Interactions';\nimport styles from './Wallet.module.css';\nimport simple_token_abi from './Contracts/simple_token_abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wallet = () => {\n  _s();\n  // deployed contract address, ganache-clib address\n  const contractAddress = '0xd8b934580fcE35a11B58C6D73aDeE468a2833fa8';\n  const [tokenName, setTokenName] = useState(\"Token\");\n  const [connectButtonName, setConnectButtonName] = useState(\"Connect\");\n  const [error, setError] = useState(null);\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnectButtonName(\"Wallet connected!\");\n      }).catch(error => {\n        setError(error.message);\n      });\n    } else {\n      console.log(\"You need to install MetaMask!\");\n      setError(\"MetaMask is not installed.\");\n    }\n  };\n  const accountChangedHandler = newAddress => {\n    setDefaultAccount(newAddress);\n    updateEthers();\n  };\n  const updateEthers = () => {\n    //from the read only provider, get the read access\n    let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n    //signer is read and write, get the write access\n    let tempSigner = tempProvider.getSigner();\n    //get the contract\n    let tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner);\n    setProvider = tempProvider;\n    setSigner = tempSigner;\n    setContract = tempContract;\n  };\n\n  // anytime the contract object changes, we run this\n  useEffect(() => {\n    if (contract != null) {\n      updateBalance();\n      updateTokenName();\n    }\n  }, [contract]);\n  const updateBalance = async () => {\n    //await because this is a promise\n    let balanceBigNumber = await contract.balanceof(defaultAccount);\n    tokenBalance = balanceBigNumber;\n    // let balanceNumber = balanceBigNumber.toNumber();\n    // let decimals = await contract.decimals();\n    // let tokenBalance = balanceNumber / Math.pow(10, decimals);\n    setBalance(tokenBalance);\n  };\n  const updateTokenName = async () => {\n    setTokenName(await contract.name());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [tokenName, \" + ERC-20\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.button6,\n      onClick: connectWalletHandler,\n      children: connectButtonName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.walletCard,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Address: \", defaultAccount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [tokenName, \" Balance: \", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Interactions, {\n        contract: contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(Wallet, \"xEV9fu3k2xCs7ggmtWDrAdt85Ns=\");\n_c = Wallet;\nexport default Wallet;\nvar _c;\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["React","useState","useEffect","ethers","Interactions","styles","simple_token_abi","Wallet","contractAddress","tokenName","setTokenName","connectButtonName","setConnectButtonName","error","setError","defaultAccount","setDefaultAccount","balance","setBalance","provider","setProvider","signer","setSigner","contract","setContract","connectWalletHandler","window","ethereum","isMetaMask","request","method","then","result","accountChangedHandler","catch","message","console","log","newAddress","updateEthers","tempProvider","providers","Web3Provider","tempSigner","getSigner","tempContract","Contract","updateBalance","updateTokenName","balanceBigNumber","balanceof","tokenBalance","name","button6","walletCard"],"sources":["/Users/sefikaakman/Desktop/483 project2/483_project_ERC20/src/Wallet.js"],"sourcesContent":["import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport Interactions from './Interactions'\nimport styles from './Wallet.module.css'\nimport simple_token_abi from './Contracts/simple_token_abi.json'\n\n\n\nconst Wallet = () => {\n    // deployed contract address, ganache-clib address\n    const contractAddress = '0xd8b934580fcE35a11B58C6D73aDeE468a2833fa8';\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [connectButtonName, setConnectButtonName] = useState(\"Connect\");\n    const [error, setError] = useState(null);\n    const [defaultAccount, setDefaultAccount] = useState(null);\n    const [balance, setBalance] = useState(null);\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n\n    const connectWalletHandler = () => {\n        if(window.ethereum && window.ethereum.isMetaMask) {\n            window.ethereum.request({method: 'eth_requestAccounts'})\n            .then(result => {\n                accountChangedHandler(result[0]);\n                setConnectButtonName(\"Wallet connected!\");\n            })\n            .catch(error => {\n                setError(error.message);\n            })\n        }\n        else {\n            console.log(\"You need to install MetaMask!\");\n            setError(\"MetaMask is not installed.\")\n        }\n    }\n\n    const accountChangedHandler = (newAddress) => {\n        setDefaultAccount(newAddress);\n        updateEthers();\n    }\n\n    const updateEthers = () => {\n        //from the read only provider, get the read access\n        let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n        //signer is read and write, get the write access\n        let tempSigner = tempProvider.getSigner();\n        //get the contract\n        let tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner);\n\n        setProvider = tempProvider;\n        setSigner = tempSigner;\n        setContract = tempContract;\n    }\n\n    // anytime the contract object changes, we run this\n    useEffect(() => {\n        if(contract != null){\n            updateBalance();\n            updateTokenName();\n        }\n    }, [contract])\n\n    const updateBalance = async () => {\n        //await because this is a promise\n        let balanceBigNumber = await contract.balanceof(defaultAccount);\n        tokenBalance = balanceBigNumber;\n        // let balanceNumber = balanceBigNumber.toNumber();\n        // let decimals = await contract.decimals();\n        // let tokenBalance = balanceNumber / Math.pow(10, decimals);\n        setBalance(tokenBalance);\n    } \n\n    const updateTokenName = async () => {\n        setTokenName(await contract.name());\n    }\n\n    return (\n        <div>\n            <h1>{tokenName} + ERC-20</h1>\n            <button className={styles.button6} onClick={connectWalletHandler}>{connectButtonName}</button>\n            <div className={styles.walletCard}>\n                <div>\n                    <h2>Address: {defaultAccount}</h2>\n                </div>\n                <div>\n                    <h2>{tokenName} Balance: {balance}</h2>\n                </div>\n                <div>\n                    {error}\n                </div>\n                <Interactions contract= {contract}/>\n            </div>\n        </div>\n    );\n}\n\nexport default Wallet;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}